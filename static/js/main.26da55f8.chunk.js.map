{"version":3,"sources":["assets/images/loader.gif","services/index.js","components/google-maps/index.js","components/loading/index.js","components/panel/index.js","components/title/index.js","components/input/index.js","components/button/index.js","components/map-content/index.js","pages/search-cep/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MAPS_KEY","process","CepServices","data","axios","get","concat","GoogleMaps","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this$props","props","google","latitude","longitude","markerName","react_default","a","createElement","dist","zoom","containerStyle","position","width","height","initialCenter","lat","lng","onClick","onMarkerClick","name","onClose","onInfoWindowClose","Component","GoogleApiWrapper","apiKey","Loading","className","src","loadingGif","alt","Panel","_ref","children","Title","Input","placeholder","type","onChange","onKeyPress","isAutoFocus","autoFocus","defaultProps","Button","rest","objectWithoutProperties","assign","MapContent","mapsResp","cepResponse","closeMapContent","components_panel","logradouro","bairro","localidade","uf","cep","google_maps","googleMapURL","loadingElement","style","containerElement","mapElement","results","geometry","location","SearchCep","state","loading","cepValue","error","isClosed","setError","_this","setState","getCep","jsonp","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","abrupt","erro","GetInfosFromAddress","sent","stop","_x","_x2","handleInputChange","e","numberValue","target","replace","isNaN","handleKeyPress","closePanel","renderMap","_this$state","status","map_content","_this$state2","react","components_title","components_input","components_button","components_loading","PureComponent","App","pages_search_cep","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.26da55f8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.fcd8d05c.gif\";","import axios from 'axios';\n\nexport const MAPS_KEY = process.env.REACT_APP_MAPS_KEY;\nexport const GEOCODE_KEY = process.env.REACT_APP_GEOCODE_KEY;\n\nclass CepServices {\n  /**\n   * Get Infos from Address\n   * @async\n   * @static\n   * @param {data} text\n   */\n  static GetInfosFromAddress(data) {\n    return axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=â€Ž${data}&key=${GEOCODE_KEY}`);\n  }\n}\n\nexport default CepServices;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport { MAPS_KEY } from '../../services';\n\nexport class GoogleMaps extends Component {\n  render() {\n    const {\n      google,\n      latitude,\n      longitude,\n      markerName\n    } = this.props;\n    return (\n      <Map\n        google={google}\n        zoom={15}\n        containerStyle={{\n          position: 'relative',\n          width: '100%',\n          height: '400px'\n        }}\n        initialCenter={{\n          lat: latitude,\n          lng: longitude\n        }}\n      >\n        <Marker\n          onClick={this.onMarkerClick}\n          name={markerName}\n        />\n        <InfoWindow onClose={this.onInfoWindowClose}>\n          <div>\n            <h1>{markerName}</h1>\n          </div>\n        </InfoWindow>\n      </Map>\n    );\n  }\n}\n\nGoogleMaps.propTypes = {\n  google: PropTypes.object.isRequired,\n  latitude: PropTypes.number.isRequired,\n  longitude: PropTypes.number.isRequired,\n  markerName: PropTypes.string.isRequired,\n};\n\nexport default GoogleApiWrapper({\n  apiKey: (MAPS_KEY)\n})(GoogleMaps);\n","import React from 'react';\n\nimport loadingGif from '../../assets/images/loader.gif';\nimport './loading.css';\n\nconst Loading = () => (\n  <div className=\"loading-wrapper\">\n    <img\n      className=\"loading-image\"\n      src={loadingGif}\n      alt=\"Loader\"\n    />\n  </div>\n);\n\nexport default Loading;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './panel.css';\n\nconst Panel = ({ children }) => <div className=\"panel\">{children}</div>\n\nPanel.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default Panel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './title.css';\n\nconst Title = ({ children }) => <h1 className=\"title\">{children}</h1>;\n\nTitle.propTypes = {\n  children: PropTypes.string.isRequired\n};\n\nexport default Title;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './input.css';\n\nconst Input = ({\n  placeholder,\n  type,\n  value,\n  onChange,\n  onKeyPress,\n  isAutoFocus\n}) => (\n  <input\n    className=\"input-search\"\n    placeholder={placeholder}\n    type={type}\n    value={value}\n    onChange={onChange}\n    onKeyPress={onKeyPress}\n    autoFocus={isAutoFocus}\n  />\n);\n\nInput.propTypes = {\n  placeholder: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onKeyPress: PropTypes.func.isRequired,\n  isAutoFocus: PropTypes.bool,\n};\n\nInput.defaultProps = {\n  isAutoFocus: false,\n};\n\nexport default Input;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './button.css';\n\nconst Button = ({ children, ...rest }) => <div className=\"button\" {...rest}>{children}</div>\n\nButton.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  GoogleMaps,\n  Panel,\n} from '../index';\nimport { MAPS_KEY } from '../../services';\n\nconst MapContent = ({ mapsResp, cepResponse, closeMapContent }) => {\n  return (\n    <Panel>\n      <button className=\"close-button\" onClick={closeMapContent}>X</button>\n      <div className=\"address-infos\">\n        <h2>{cepResponse.logradouro}</h2>\n        <p>{cepResponse.bairro}</p>\n        <p>{cepResponse.localidade} - {cepResponse.uf}</p>\n        <p>{cepResponse.cep}</p>\n      </div>\n      <GoogleMaps\n        googleMapURL={`https://maps.googleapis.com/maps/api/js?key=${MAPS_KEY}&callback=initMap\"`}\n        loadingElement={<div style={{ height: '400px' }} />}\n        containerElement={<div style={{ height: '400px' }} />}\n        mapElement={<div style={{ height: '400px' }} />}\n        latitude={mapsResp.results[0].geometry.location.lat}\n        longitude={mapsResp.results[0].geometry.location.lng}\n        markerName=\"Av Nova\"\n      />\n    </Panel>\n  );\n}\n\nMapContent.propTypes = {\n  mapsResp: PropTypes.object,\n  cepResponse: PropTypes.object,\n  closeMapContent: PropTypes.func.isRequired,\n};\n\nMapContent.defaultProps = {\n  mapsResp: {},\n  cepResponse: {},\n};\n\nexport default MapContent;\n","import React, { PureComponent, Fragment } from 'react';\nimport jsonp from 'jsonp';\n\nimport {\n  Loading,\n  Title,\n  Panel,\n  Input,\n  Button,\n  MapContent\n} from '../../components';\nimport CepServices from '../../services';\nimport './search-cep.css';\n\nclass SearchCep extends PureComponent {\n  state = {\n    mapsResp: null,\n    cepResponse: null,\n    loading: false,\n    cepValue: '',\n    error: false,\n    isClosed: false\n  };\n\n  setError = () => {\n    this.setState({\n      error: true,\n      loading: false\n    });\n  }\n\n  getCep = () => {\n    const { cepValue } = this.state;\n    this.setState({\n      loading: true,\n      cepResponse: null,\n      mapsResp: null,\n      isClosed: false\n    });\n\n    jsonp(`https://viacep.com.br/ws/${cepValue}/json?callback=myfn`, null, async (error, data) => {\n      if (error) {\n        return this.setError();\n      } else {\n        if (data.erro) {\n          return this.setError();\n        }\n        const mapsResp = await CepServices.GetInfosFromAddress(data.logradouro);\n        return this.setState({\n          mapsResp: mapsResp.data,\n          cepResponse: data,\n          error: false,\n          loading: false \n        });\n      }\n    });\n  }\n\n  handleInputChange = (e) => {\n    const { value } = e.target;\n    const numberValue = value.replace(/[^\\d]/,'');\n\n    if (!isNaN(numberValue)) {\n      return this.setState({ cepValue: numberValue });\n    }\n\n    return null;\n  }\n\n  handleKeyPress = (target) => {\n    if (target.key === 'Enter') {\n      this.getCep();\n    }\n  }\n\n  closePanel = () => this.setState({ isClosed: true, error: false });\n\n  renderMap = () => {\n    const { mapsResp, cepResponse, error, isClosed } = this.state;\n    \n    if (mapsResp && mapsResp.status === 'OK' && !isClosed) {\n      return (\n        <MapContent\n          mapsResp={mapsResp}\n          cepResponse={cepResponse}\n          closeMapContent={this.closePanel}\n        />\n      );\n    } else if (error){\n      return (\n        <Panel>\n          <h2>Ops, CEP Inexistente. =/</h2>\n        </Panel>\n      );\n    }\n\n    return null;\n  }\n\n  render() {\n    const { cepValue, loading } = this.state;\n\n    return (\n      <Fragment>\n        <Title>Consulta de EndereÃ§o</Title>\n        <Panel>\n          <div className=\"search-wrapper\">\n            <Input\n              className=\"input-search\"\n              placeholder=\"Digite um CEP\"\n              type=\"text\"\n              value={cepValue}\n              onChange={this.handleInputChange}\n              onKeyPress={this.handleKeyPress}\n              isAutoFocus\n            />\n            <Button onClick={this.getCep}>Buscar</Button>\n          </div>\n        </Panel>\n        {loading ? <Loading /> : this.renderMap()}\n      </Fragment>\n    );\n  }\n}\n\nexport default SearchCep;\n","import React, { Component } from 'react';\n\nimport SearchCep from './pages/search-cep';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <SearchCep />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}