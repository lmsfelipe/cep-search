{"version":3,"sources":["components/google-maps/index.js","services/index.js","pages/search-cep/index.js","App.js","serviceWorker.js","index.js"],"names":["GoogleMaps","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this$props","props","google","latitude","longitude","markerName","react_default","a","createElement","dist","zoom","containerStyle","position","width","height","initialCenter","lat","lng","onClick","onMarkerClick","name","onClose","onInfoWindowClose","Component","GoogleApiWrapper","apiKey","MAPS_KEY","process","CepServices","data","axios","get","concat","SearchCep","state","mapsResp","loading","cepValue","error","getCep","_callee","cepResponse","response","regenerator_default","wrap","_context","prev","next","_this","setState","GetAddressFromCep","sent","GetInfosFromAddress","logradouro","t0","console","log","errorMessage","stop","handleInputChange","e","target","renderMap","_this$state","status","react","bairro","cep","google_maps","googleMapURL","loadingElement","style","containerElement","mapElement","results","geometry","location","_this$state2","className","type","onChange","heigth","PureComponent","App","pages_search_cep","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAIaA,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WACW,IAAAC,EAMHT,KAAKU,MAJPC,EAFKF,EAELE,OACAC,EAHKH,EAGLG,SACAC,EAJKJ,EAILI,UACAC,EALKL,EAKLK,WAEF,OACEC,EAAAC,EAAAC,cAACC,EAAA,IAAD,CACEP,OAAQA,EACRQ,KAAM,GACNC,eAAgB,CACdC,SAAU,WACVC,MAAO,OACPC,OAAQ,SAEVC,cAAe,CACbC,IAAKb,EACLc,IAAKb,IAGPE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CACES,QAAS3B,KAAK4B,cACdC,KAAMf,IAERC,EAAAC,EAAAC,cAACC,EAAA,WAAD,CAAYY,QAAS9B,KAAK+B,mBACxBhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKH,UA5BjBlB,EAAA,CAAgCoC,aA2CjBC,6BAAiB,CAC9BC,OAAS,2CADID,CAEZrC,oBC/CUuC,EAAWC,0CAyBTC,iHAfYC,GACvB,OAAOC,IAAMC,IAAN,4BAAAC,OAAsCH,EAAtC,sDASkBA,GACzB,OAAOC,IAAMC,IAAN,mEAAAC,OAAwEH,EAAxE,SAAAG,OApBgBL,qDCmFZM,oNA/EbC,MAAQ,CACNC,SAAU,KACVC,SAAS,EACTC,SAAU,GACVC,OAAO,KAGTC,4BAAS,SAAAC,IAAA,IAAAH,EAAAI,EAAAC,EAAA,OAAAC,EAAApC,EAAAqC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACCV,EAAaW,EAAKd,MAAlBG,SACRW,EAAKC,SAAS,CAAEb,SAAS,IAFlBS,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAKqBnB,EAAYsB,kBAAkBb,GALnD,cAKCI,EALDI,EAAAM,KAAAN,EAAAE,KAAA,EAMkBnB,EAAYwB,oBAAoBX,EAAYZ,KAAKwB,YANnE,OAMCX,EANDG,EAAAM,KAQLH,EAAKC,SAAS,CACZd,SAAUO,EAASb,KACnBY,YAAaA,EAAYZ,KACzBO,SAAS,IAXNS,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAS,GAAAT,EAAA,SAcLU,QAAQC,IAAI,QAASX,EAAAS,GAAMZ,UAC3BM,EAAKC,SAAS,CACZX,OAAO,EACPmB,aAAcZ,EAAAS,GAAMZ,SAASb,KAC7BO,SAAS,IAlBN,yBAAAS,EAAAa,SAAAlB,EAAAjD,KAAA,eAuBToE,kBAAoB,SAACC,GAAD,OAAOZ,EAAKC,SAAS,CAAEZ,SAAUuB,EAAEC,OAAO9D,WAE9D+D,UAAY,WAAM,IAAAC,EACkBf,EAAKd,MAA/BC,EADQ4B,EACR5B,SAAUM,EADFsB,EACEtB,YAElB,OAAIN,GAAgC,OAApBA,EAAS6B,OAErB1D,EAAAC,EAAAC,cAACyD,EAAA,SAAD,KACE3D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAIiC,EAAYyB,QAChB5D,EAAAC,EAAAC,cAAA,SAAIiC,EAAYY,YAChB/C,EAAAC,EAAAC,cAAA,SAAIiC,EAAY0B,MAElB7D,EAAAC,EAAAC,cAAC4D,EAAD,CACEC,aAAY,+CAAArC,OAAiDN,EAAjD,sBACZ4C,eAAgBhE,EAAAC,EAAAC,cAAA,OAAK+D,MAAO,CAAEzD,OAAQ,WACtC0D,iBAAkBlE,EAAAC,EAAAC,cAAA,OAAK+D,MAAO,CAAEzD,OAAQ,WACxC2D,WAAYnE,EAAAC,EAAAC,cAAA,OAAK+D,MAAO,CAAEzD,OAAQ,WAClCX,SAAUgC,EAASuC,QAAQ,GAAGC,SAASC,SAAS5D,IAChDZ,UAAW+B,EAASuC,QAAQ,GAAGC,SAASC,SAAS3D,IACjDZ,WAAW,aAKVC,EAAAC,EAAAC,cAAA,qIAIF,IAAAqE,EACuBtF,KAAK2C,MAA3BG,EADDwC,EACCxC,SAAUD,EADXyC,EACWzC,QAElB,OACE9B,EAAAC,EAAAC,cAACyD,EAAA,SAAD,KAEE3D,EAAAC,EAAAC,cAAA,OAAKsE,UAAU,wBACbxE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOuE,KAAK,OAAOhF,MAAOsC,EAAU2C,SAAUzF,KAAKoE,oBACnDrD,EAAAC,EAAAC,cAAA,UAAQU,QAAS3B,KAAKgD,QAAtB,WAEFjC,EAAAC,EAAAC,cAAA,OAAK+D,MAAO,CAAE1D,MAAO,QAASoE,OAAQ,UACnC7C,EAAU9B,EAAAC,EAAAC,cAAA,yBAAuBjB,KAAKuE,sBAxE3BoB,kBCQTC,mLARX,OACE7E,EAAAC,EAAAC,cAAA,OAAKsE,UAAU,OACbxE,EAAAC,EAAAC,cAAC4E,EAAD,cAJU7D,aCQE8D,QACW,cAA7BC,OAAOV,SAASW,UAEe,UAA7BD,OAAOV,SAASW,UAEhBD,OAAOV,SAASW,SAASC,MACvB,2DCZNC,IAASC,OAAOpF,EAAAC,EAAAC,cAACmF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.806569de.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\n\nexport class GoogleMaps extends Component {\n  render() {\n    const {\n      google,\n      latitude,\n      longitude,\n      markerName\n    } = this.props;\n    return (\n      <Map\n        google={google}\n        zoom={15}\n        containerStyle={{\n          position: 'relative',\n          width: '100%',\n          height: '400px'\n        }}\n        initialCenter={{\n          lat: latitude,\n          lng: longitude\n        }}\n      >\n        <Marker\n          onClick={this.onMarkerClick}\n          name={markerName}\n        />\n        <InfoWindow onClose={this.onInfoWindowClose}>\n          <div>\n            <h1>{markerName}</h1>\n          </div>\n        </InfoWindow>\n      </Map>\n    );\n  }\n}\n\nGoogleMaps.propTypes = {\n  google: PropTypes.object.isRequired,\n  latitude: PropTypes.number.isRequired,\n  longitude: PropTypes.number.isRequired,\n  markerName: PropTypes.string.isRequired,\n};\n\nexport default GoogleApiWrapper({\n  apiKey: ('AIzaSyCUSvFPCt5OzWY6noWyEFPGgRDALZf4s2A')\n})(GoogleMaps);\n","import axios from 'axios';\n\nexport const MAPS_KEY = process.env.REACT_APP_MAPS_KEY;\nexport const GEOCODE_KEY = process.env.REACT_APP_GEOCODE_KEY;\n\nclass CepServices {\n  /**\n   * Get Address from Cep\n   * @async\n   * @static\n   * @param {data} text\n   */\n  static GetAddressFromCep(data) {\n    return axios.get(`https://viacep.com.br/ws/${data}/json`);\n  }\n\n  /**\n   * Get Infos from Address\n   * @async\n   * @static\n   * @param {data} text\n   */\n  static GetInfosFromAddress(data) {\n    return axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=â€Ž${data}&key=${GEOCODE_KEY}`);\n  }\n}\n\nexport default CepServices;\n","import React, { PureComponent, Fragment } from 'react';\n\nimport GoogleMaps from '../../components/google-maps';\nimport CepServices, { MAPS_KEY } from '../../services';\nimport './search-cep.css';\n\nclass SearchCep extends PureComponent {\n  state = {\n    mapsResp: null,\n    loading: false,\n    cepValue: '',\n    error: false\n  };\n\n  getCep = async () => {\n    const { cepValue } = this.state;\n    this.setState({ loading: true });\n\n    try {\n      const cepResponse = await CepServices.GetAddressFromCep(cepValue);\n      const response = await CepServices.GetInfosFromAddress(cepResponse.data.logradouro);\n\n      this.setState({\n        mapsResp: response.data,\n        cepResponse: cepResponse.data,\n        loading: false \n      });\n    } catch (error) {\n      console.log('ERROO', error.response);\n      this.setState({\n        error: true,\n        errorMessage: error.response.data,\n        loading: false \n      });\n    }\n  }\n\n  handleInputChange = (e) => this.setState({ cepValue: e.target.value })\n\n  renderMap = () => {\n    const { mapsResp, cepResponse } = this.state;\n    \n    if (mapsResp && mapsResp.status === 'OK') {\n      return (\n        <Fragment>\n          <div>\n            <p>{cepResponse.bairro}</p>\n            <p>{cepResponse.logradouro}</p>\n            <p>{cepResponse.cep}</p>\n          </div>\n          <GoogleMaps\n            googleMapURL={`https://maps.googleapis.com/maps/api/js?key=${MAPS_KEY}&callback=initMap\"`}\n            loadingElement={<div style={{ height: '400px' }} />}\n            containerElement={<div style={{ height: '400px' }} />}\n            mapElement={<div style={{ height: '400px' }} />}\n            latitude={mapsResp.results[0].geometry.location.lat}\n            longitude={mapsResp.results[0].geometry.location.lng}\n            markerName=\"Av Nova\"\n          />\n        </Fragment>\n      );\n    } else {\n      return <h2>Opss, houve um problema ao carregar o mapa. =/</h2>\n    }\n  }\n\n  render() {\n    const { cepValue, loading } = this.state;\n\n    return (\n      <Fragment>\n        {/* <h1>Consulta de CEP</h1> */}\n        <div className=\"search-cep-container\">\n          <div>\n            <input type=\"text\" value={cepValue} onChange={this.handleInputChange} />\n            <button onClick={this.getCep}>Buscar</button>\n          </div>\n          <div style={{ width: '400px', heigth: '400px' }}>\n            {loading ? <h1>Loading Map</h1> : this.renderMap()}\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default SearchCep;\n","import React, { Component } from 'react';\nimport './App.css';\nimport SearchCep from './pages/search-cep';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <SearchCep />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}