{"version":3,"sources":["assets/images/loader.gif","services/index.js","components/google-maps/index.js","components/loading/index.js","components/title/index.js","pages/search-cep/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MAPS_KEY","process","CepServices","data","axios","get","concat","GoogleMaps","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this$props","props","google","latitude","longitude","markerName","react_default","a","createElement","dist","zoom","containerStyle","position","width","height","initialCenter","lat","lng","onClick","onMarkerClick","name","onClose","onInfoWindowClose","Component","GoogleApiWrapper","apiKey","Loading","className","src","loadingGif","alt","Title","_ref","children","SearchCep","state","mapsResp","cepResponse","loading","cepValue","error","isClosed","setError","_this","setState","getCep","_callee","response","regenerator_default","wrap","_context","prev","next","GetAddressFromCep","sent","GetInfosFromAddress","logradouro","erro","abrupt","t0","stop","handleInputChange","e","numberValue","target","replace","isNaN","handleKeyPress","closePanel","renderMap","_this$state","status","bairro","localidade","uf","cep","google_maps","googleMapURL","loadingElement","style","containerElement","mapElement","results","geometry","location","_this$state2","react","components_title","placeholder","type","onChange","onKeyPress","autoFocus","components_loading","PureComponent","App","pages_search_cep","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0bf5cc8e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.fcd8d05c.gif\";","import axios from 'axios';\n\nexport const MAPS_KEY = process.env.REACT_APP_MAPS_KEY;\nexport const GEOCODE_KEY = process.env.REACT_APP_GEOCODE_KEY;\n\nclass CepServices {\n  /**\n   * Get Address from Cep\n   * @async\n   * @static\n   * @param {data} text\n   */\n  static GetAddressFromCep(data) {\n    return axios.get(`https://viacep.com.br/ws/${data}/json`);\n  }\n\n  /**\n   * Get Infos from Address\n   * @async\n   * @static\n   * @param {data} text\n   */\n  static GetInfosFromAddress(data) {\n    return axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=â€Ž${data}&key=${GEOCODE_KEY}`);\n  }\n}\n\nexport default CepServices;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport { MAPS_KEY } from '../../services';\n\nexport class GoogleMaps extends Component {\n  render() {\n    const {\n      google,\n      latitude,\n      longitude,\n      markerName\n    } = this.props;\n    return (\n      <Map\n        google={google}\n        zoom={15}\n        containerStyle={{\n          position: 'relative',\n          width: '100%',\n          height: '400px'\n        }}\n        initialCenter={{\n          lat: latitude,\n          lng: longitude\n        }}\n      >\n        <Marker\n          onClick={this.onMarkerClick}\n          name={markerName}\n        />\n        <InfoWindow onClose={this.onInfoWindowClose}>\n          <div>\n            <h1>{markerName}</h1>\n          </div>\n        </InfoWindow>\n      </Map>\n    );\n  }\n}\n\nGoogleMaps.propTypes = {\n  google: PropTypes.object.isRequired,\n  latitude: PropTypes.number.isRequired,\n  longitude: PropTypes.number.isRequired,\n  markerName: PropTypes.string.isRequired,\n};\n\nexport default GoogleApiWrapper({\n  apiKey: (MAPS_KEY)\n})(GoogleMaps);\n","import React from 'react';\n\nimport loadingGif from '../../assets/images/loader.gif';\nimport './loading.css';\n\nconst Loading = () => (\n  <div className=\"loading-wrapper\">\n    <img\n      className=\"loading-image\"\n      src={loadingGif}\n      alt=\"Loader\"\n    />\n  </div>\n);\n\nexport default Loading;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './title.css';\n\nconst Title = ({ children }) => <h1 className=\"title\">{children}</h1>;\n\nTitle.propTypes = {\n  children: PropTypes.string.isRequired\n};\n\nexport default Title;\n","import React, { PureComponent, Fragment } from 'react';\n\nimport GoogleMaps from '../../components/google-maps';\nimport Loading from '../../components/loading';\nimport Title from '../../components/title';\nimport CepServices, { MAPS_KEY } from '../../services';\nimport './search-cep.css';\n\nclass SearchCep extends PureComponent {\n  state = {\n    mapsResp: null,\n    cepResponse: null,\n    loading: false,\n    cepValue: '',\n    error: false,\n    isClosed: false\n  };\n\n  setError = () => {\n    this.setState({\n      error: true,\n      loading: false\n    });\n  }\n\n  getCep = async () => {\n    const { cepValue } = this.state;\n    this.setState({\n      loading: true,\n      cepResponse: null,\n      mapsResp: null,\n      isClosed: false\n    });\n\n    try {\n      const cepResponse = await CepServices.GetAddressFromCep(cepValue);\n      const response = await CepServices.GetInfosFromAddress(cepResponse.data.logradouro);\n\n      if (cepResponse.data.erro) {\n        return this.setError();\n      }\n\n      return this.setState({\n        mapsResp: response.data,\n        cepResponse: cepResponse.data,\n        error: false,\n        loading: false \n      });\n    } catch (error) {\n      return this.setError();\n    }\n  }\n\n  handleInputChange = (e) => {\n    const { value } = e.target;\n    const numberValue = value.replace(/[^\\d]/,'');\n\n    if (!isNaN(numberValue)) {\n      return this.setState({ cepValue: numberValue });\n    }\n\n    return null;\n  }\n\n  handleKeyPress = (target) => {\n    if (target.key === 'Enter') {\n      this.getCep();\n    }\n  }\n\n  closePanel = () => this.setState({ isClosed: true, error: false });\n\n  renderMap = () => {\n    const { mapsResp, cepResponse, error, isClosed } = this.state;\n    \n    if (mapsResp && mapsResp.status === 'OK' && !isClosed) {\n      return (\n        <div className=\"panel\">\n          <button className=\"close-button\" onClick={this.closePanel}>X</button>\n          <div className=\"address-infos\">\n            <h2>{cepResponse.logradouro}</h2>\n            <p>{cepResponse.bairro}</p>\n            <p>{cepResponse.localidade} - {cepResponse.uf}</p>\n            <p>{cepResponse.cep}</p>\n          </div>\n          <GoogleMaps\n            googleMapURL={`https://maps.googleapis.com/maps/api/js?key=${MAPS_KEY}&callback=initMap\"`}\n            loadingElement={<div style={{ height: '400px' }} />}\n            containerElement={<div style={{ height: '400px' }} />}\n            mapElement={<div style={{ height: '400px' }} />}\n            latitude={mapsResp.results[0].geometry.location.lat}\n            longitude={mapsResp.results[0].geometry.location.lng}\n            markerName=\"Av Nova\"\n          />\n        </div>\n      );\n    } else if (error){\n      return (\n        <div className=\"panel\">\n          <h2>Ops, CEP Inexistente. =/</h2>\n        </div>\n      );\n    }\n\n    return null;\n  }\n\n  render() {\n    const { cepValue, loading } = this.state;\n\n    return (\n      <Fragment>\n        <Title>Consulta de EndereÃ§o</Title>\n        <div className=\"panel\">\n          <div>\n            <input\n              className=\"input-search\"\n              placeholder=\"Digite um CEP\"\n              type=\"text\"\n              value={cepValue}\n              onChange={this.handleInputChange}\n              onKeyPress={this.handleKeyPress}\n              autoFocus\n            />\n            <button className=\"primary-button\" onClick={this.getCep}>Buscar</button>\n          </div>\n        </div>\n        {loading ? <Loading /> : this.renderMap()}\n      </Fragment>\n    );\n  }\n}\n\nexport default SearchCep;\n","import React, { Component } from 'react';\n\nimport SearchCep from './pages/search-cep';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <SearchCep />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}